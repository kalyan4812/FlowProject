package com.example.flowproject.ui.add_task_screen

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.flowproject.R
import com.example.flowproject.adapters.TaskScreenAdapter
import com.example.flowproject.databinding.FragmentAddTaskBinding
import com.example.flowproject.models.Task
import com.example.flowproject.ui.add_task_screen.AddTaskScreenEvent.*
import com.example.flowproject.ui.task_screen.TaskScreenEvent
import com.example.flowproject.ui.task_screen.TaskViewModel
import com.example.flowproject.utils.UIEvent
import com.google.android.material.snackbar.Snackbar
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.android.synthetic.main.fragment_add_task.*
import kotlinx.android.synthetic.main.fragment_task_screen.*
import kotlinx.android.synthetic.main.fragment_task_screen.floating_add_task
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.FlowCollector
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import java.lang.StringBuilder


@AndroidEntryPoint
class AddTaskFragment : Fragment() {

    val viewModel: AddTaskViewModel by viewModels()
    private lateinit var binding: FragmentAddTaskBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_add_task, container, false)
    }

    val args: AddTaskFragmentArgs by navArgs() // generated by navigation component.


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding= FragmentAddTaskBinding.bind(view)
        subscribeToEvents()
        setUpListeners()
        viewModel.onEvent(onScreenLoaded(args.taskId))
    }

    private fun setUpListeners() {
        binding.floatingAddTask.setOnClickListener {
            viewModel.onEvent(onSaveTask)
        }
        binding.edTaskTitle.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun afterTextChanged(text: Editable?) {
                viewModel.onEvent(onTitleChange(text.toString()))
            }
        })

        binding.edTaskDescription.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

            }

            override fun afterTextChanged(text: Editable?) {

                viewModel.onEvent(onDescriptionChange(text.toString()))
            }

        })
    }

    fun <T> collectLifecycleAwareFlow(
        flow: Flow<T>,
        collect: suspend (T) -> Unit
    ) {
        lifecycleScope.launch {

            lifecycle.repeatOnLifecycle(Lifecycle.State.STARTED) {
                flow.collectLatest(collect)
            }


        }
    }

    private fun subscribeToEvents() {
        collectLifecycleAwareFlow(viewModel.live_title) {
            binding.edTaskTitle.apply {
                clearComposingText()
                setText(it)
                if (it.isNotBlank()){
                    setSelection(it.length)
                }
            }
        }
        collectLifecycleAwareFlow(viewModel.live_description) {
            binding.edTaskDescription.apply {
                clearComposingText()
                setText(it)
                if (it.isNotBlank()){
                    setSelection(it.length)
                }
            }
        }

        collectLifecycleAwareSharedFlow(viewModel.ui_events) { event ->
            when (event) {
                is UIEvent.showSnackBar -> {
                    Snackbar.make(requireView(), event.messsage, Snackbar.LENGTH_SHORT)
                        .show()
                }
                is UIEvent.popBackStack -> {
                    findNavController().popBackStack()
                }
                else -> Unit
            }
        }

    }

    fun <T> collectLifecycleAwareSharedFlow(
        flow: Flow<T>,
        collect: FlowCollector<T>
    ) {
        lifecycleScope.launch {
            lifecycle.repeatOnLifecycle(Lifecycle.State.STARTED) {
                flow.collect(collect)
            }
        }
    }


}